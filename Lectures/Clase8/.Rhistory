set.seed(2020)
dbern(x, prob, log = FALSE)
dbinom(x, size, prob, log = FALSE)
dbinom(100, size, prob, log = FALSE)
dbinom(0.5, 30, prob, log = FALSE)
?dbinom
dbinom(46:54, 100, 0.5)
dbinom(100, 100, 0.5)
dbinom(100,100, 0.5)
dbinom(50,100, 0.5)
dbinom(1:100,100, 0.5)
set.seed(2020)
options(scipen=9999999)
dbinom(1:100,100, 0.5)
plot(dbinom(1:100,100, 0.5))
dbinom(c(1,25,50,75,100),100, 0.5)
plot(dbinom(c(1,25,50,75,100),100, 0.5))
binomial = dbinom(
c(1,25,50,75,100), # quartiles, podria haber sido 1:100 y plotear cada cuartil.
100, # N
0.5 # probabilidad de cada evento
)
plot(binomial)
lattice:densityplot(binomial)
library(densityplot)
require(lattice)
lattice:densityplot(binomial)
library(lattice)
lattice:densityplot(binomial)
densityplot(binomial)
hist(binomial)
rbinom(100, 1, 0.5)
rbinom(100, # N
1, # pruebas (se tira la moneda una vez)
0.5 # probabilidad de obtener 1.
)
binomial = rbinom(
100, # N
1, # pruebas (se tira la moneda una vez)
0.5 # probabilidad de obtener 1.
)
densityplot(binomial)
hist(binomial)
binomial = rbinom(
100, # N
1, # pruebas (se tira la moneda una vez)
0.2 # probabilidad de obtener 1.
)
hist(binomial)
hist(binomial.ok)
binomial.ok = rbinom(
100, # N
1, # pruebas (se tira la moneda una vez)
0.2 # probabilidad de obtener 1.
)
hist(binomial.ok)
# Cargada
binomial.cargada = rbinom(
100, # N
1, # pruebas (se tira la moneda una vez)
0.1 # probabilidad de obtener 1.
)
hist(binomial.cargada)
hist(binomial.cargada, main = "")
rbern(
100, # N
1, # pruebas (se tira la moneda una vez)
0.5 # probabilidad de obtener 1.
)
install.packages("Bernoulli")
install.packages("extraDistr")
help(extraDistr)
# Normal
p_load(extraDistr)
if (!require("pacman")) install.packages("pacman"); library(pacman)
# Normal
p_load(extraDistr)
help(extraDistr)
rbern(100, prob = 0.5)
p_load(extraDistr)
binomial.ok =  rbern(100, # N
prob = 0.5 # probabilidad de obtener 1
)
hist(binomial.ok)
set.seed(2020)
binomial.ok =  rbern(100, # N
prob = 0.5 # probabilidad de obtener 1
)
hist(binomial.ok)
binomial.ok =  rbern(100, # N
prob = 0.1 # probabilidad de obtener 1
)
hist(binomial.cargada, main = "")
binomial.cargada =  rbern(100, # N
prob = 0.1 # probabilidad de obtener 1
)
hist(binomial.cargada, main = "")
# Normal
p_load(extraDistr)
binomial.ok =  rbern(100, # N
prob = 0.5 # probabilidad de obtener 1
)
hist(binomial.ok)
# Cargada
binomial.cargada =  rbern(100, # N
prob = 0.1 # probabilidad de obtener 1
)
hist(binomial.cargada, main = "")
rbern(100, # N
prob = 0.5 # probabilidad de obtener 1
)
set.seed(2020)
options(scipen=9999999)
if (!require("pacman")) install.packages("pacman"); library(pacman)
# Normal
p_load(extraDistr)
binomial.ok =  rbern(100, # N
prob = 0.5 # probabilidad de obtener 1
)
hist(binomial.ok)
hist(binomial.ok, main = "")
library(extraDistr)
help(extraDistr)
rbbinom(1e5, 1000, 5, 13)
rbbinom(1, 1000, 5, 13)
rbbinom(20, 1000, 5, 13)
rbbinom(20, 1, 5, 13)
rbbinom(20,
size = 1 # "Trials" o pruebas. Cuantas elecciones hubieron?
)
diez.elecciones = rbbinom(20, # N
size = 10 # "Trials" o pruebas. Cuantas elecciones hubieron?
)
diez.elecciones
# 1 Eleccion (observas el total por cada individuo)
una.eleccion = rbbinom(20, # N
size = 1 # "Trials" o pruebas. Cuantas elecciones hubieron?
)
una.eleccion
# 10 Elecciones (solo observas el total por cada individuo)
diez.elecciones = rbbinom(20, # N
size = 10 # "Trials" o pruebas. Cuantas elecciones hubieron?
)
diez.elecciones
rtpois(20, # N
1 # lambda
)
rbnbinom(20, 10)
rbnbinom(20, # N
10) # "Trials" o pruebas.
rbnbinom(20, # N
10) # "Trials" o pruebas.
rbnbinom(20, # N
1) # "Trials" o pruebas.
rbnbinom(20, # N
1) # "Trials" o pruebas.
rbnbinom(20, # N
1) # "Trials" o pruebas.
rbnbinom(20) # "Trials" o pruebas.
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(truncnorm)
rtruncnorm(20, a=0, b=100, mean = 20)
pres.ap = rtruncnorm(20, a=0, b=100, mean = 20)
sum(rtruncnorm(pres.ap, size=20, prob=0.5, log=TRUE))    # expression of data likelihood
pres.ap
rtruncnorm(pres.ap, size=20, prob=0.5, log=TRUE)    # expression of data likelihood
rtruncnorm(pres.ap, prob=0.5, log=TRUE)    # expression of data likelihood
rtruncnorm(pres.ap, log=TRUE)    # expression of data likelihood
rtruncnorm(pres.ap)    # expression of data likelihood
sum(rtruncnorm(pres.ap, size=20, prob=0.5))    # expression of data likelihood
sum(rtruncnorm(pres.ap, size=20))    # expression of data likelihood
sum(rtruncnorm(pres.ap, prob=0.5))    # expression of data likelihood
sum(rtruncnorm(pres.ap))    # expression of data likelihood
rtruncnorm(pres.ap)    # expression of data likelihood
rtruncnorm(pres.ap)    # expression of data likelihood
sum(rtruncnorm(20, a=0, b=100, mean = 20))
rtruncnorm(20, a=0, b=100, mean = 20)
log(sum(rtruncnorm(20, a=0, b=100, mean = 20)))
set.seed(2020)
sum(rtruncnorm(20, a=0, b=100, mean = 20))
sum(rtruncnorm(20, a=0, b=100, mean = 20))
set.seed(2020)
sum(rtruncnorm(20, a=0, b=100, mean = 20))
set.seed(2020)
sum(rtruncnorm(20, a=0, b=100, mean = 20))
set.seed(2020)
sum(rtruncnorm(20, a=0, b=100, mean = 20))
set.seed(2020)
sum(rtruncnorm(20, a=0, b=100, mean = 20))
set.seed(2020)
sum(rtruncnorm(20, a=0, b=100, mean = 20))
set.seed(2020)
sum(rtruncnorm(20, a=0, b=100, mean = 20))
set.seed(2020)
sum(rtruncnorm(20, a=0, b=100, mean = 20))
sum(rtruncnorm(20, a=0, b=100, mean = 20, p=0.5)) # sumar individual likelihoods
prod(rtruncnorm(20, a=0, b=100, mean = 20, p=0.5)) # sumar individual likelihoods
prod(rtruncnorm(20, a=0, b=100, mean = 20)) # sumar individual likelihoods
load(sleep)
data(sleep)
data(sleep)
dat = data(sleep)
dat
data(sleep)
cat("\014")
rm(list=ls())
graphics.off()
if (!require("pacman")) install.packages("pacman"); library(pacman)
data(sleep)
data(sleep)
str(sleep)
head(sleep)
dat %>%
select(BodyWt, BrainWt) %>%
skimr::skim()
p_load(dplyr)
dat %>%
select(BodyWt, BrainWt) %>%
skimr::skim()
sleep %>%
select(BodyWt, BrainWt) %>%
skimr::skim()
p_load(dplyr,skimr)
sleep %>%
select(BodyWt, BrainWt) %>%
skimr::skim()
p_load(dplyr,skimr,select)
sleep %>%
select(BodyWt, BrainWt) %>%
skimr::skim()
# Relacion bivariada entre "BodyWt" (peso corporal) y "BrainWt" (peso del cerebro).
data(sleep)
head(sleep)
p_load(tourr)
data(sleep)
head(sleep)
tourr::data(sleep)
tourr::sleep
data(list=tourr)
unlist(tourr)
data(package = "tourr")
cat("\014")
rm(list=ls())
graphics.off()
# Relacion bivariada entre "BodyWt" (peso corporal) y "BrainWt" (peso del cerebro).
p_load(tourr)
data(package = "tourr")
data(sleep)
force(sleep)
cat("\014")
rm(list=ls())
graphics.off()
install.packages("tourr", repos="http://R-Forge.R-project.org")
data(package = "tourr")
# Relacion bivariada entre "BodyWt" (peso corporal) y "BrainWt" (peso del cerebro).
dat = read.dta("https://github.com/hbahamonde/MLE/blob/master/Datasets/sleep.csv")
# Relacion bivariada entre "BodyWt" (peso corporal) y "BrainWt" (peso del cerebro).
dat = read("https://github.com/hbahamonde/MLE/blob/master/Datasets/sleep.csv")
# Relacion bivariada entre "BodyWt" (peso corporal) y "BrainWt" (peso del cerebro).
dat = read.csv("https://github.com/hbahamonde/MLE/blob/master/Datasets/sleep.csv")
head(dat)
dat = read.csv(url("https://github.com/hbahamonde/MLE/blob/master/Datasets/sleep.csv"))
dat
dat
