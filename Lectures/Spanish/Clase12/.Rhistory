cat("\014")
rm(list=ls())
graphics.off()
# Hypothesis testing: Wald test, Likelihood Ratio, Lagrange Multiplier (pr치ctico)
options(scipen=100000000)
set.seed(2020)
# Data
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(mydata)
summary(mydata)
mydata$rank <- factor(mydata$rank)
head(mydata)
# modelo 1
logit.1 <- glm(admit ~ gre + gpa + rank, data = mydata, family = binomial(link = "logit")) # unrestricted
summary(logit.1)
# modelo 2: sin rank
logit.2 <- glm(admit ~ gre + gpa, data = mydata, family = binomial(link = "logit")) # restricted
summary(logit.2)
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 1) # probemos que el primer coef = 0
p_load(aod)
# Hypothesis testing: Wald test, Likelihood Ratio, Lagrange Multiplier (pr치ctico)
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(aod)
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 1) # probemos que el primer coef = 0
coef(logit.1)
help(wald.test)
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 1:2) # probemos que el primer y seg coef = 0
# Si da significativo, b0 Y b1 lo son tambien.
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 5) # probemos que el primer coef = 0
logit.1
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 6) # probemos que el primer coef = 0
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 7) # probemos que el primer coef = 0
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 6) # probemos que el primer coef = 0
summary(logit.1)
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 1) # probemos que el primer coef = 0
effects(logit.1)
effects(logit.1, "Intercept")
plot(effects(logit.1, "Intercept"))
plot(Effects(logit.1, "Intercept"))
plot(AllEffects(logit.1, "Intercept"))
effCoef(logit.1, "Intercept")
library(effects)
effCoef(logit.1, "Intercept")
effCoef(logit.1)
plot(logit.1, "Intercept")
Effect("Intercept", logit.1)
p_load(ggeffects)
ggpredict(logit.1, "Intercept")
ggpredict(logit.1, "(Intercept)")
ggpredict(logit.1, "gre")
plot(ggpredict(logit.1, "gre"))
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 2) # probemos que el primer coef = 0
coef(logit.1),
coef(logit.1)
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 1) # probemos que el primer coef = 0
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 6) # probemos que el primer coef = 0
ggpredict(logit.1, "gre")
help(ggpredict)
plot(ggpredict(logit.1, "gre"))
summary(logit.1)
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 2) # probemos que el primer coef = 0
plot(ggpredict(logit.1, "gre"))
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 1:2, df= length(coef(logit.1)) ) # probemos que el primer y seg coef = 0
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 2, df= length(coef(logit.1))) # probemos que el primer coef = 0
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 1, df= length(coef(logit.1))) # probemos que el primer coef = 0
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 2, df= length(coef(logit.1))) # probemos que el primer coef = 0
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 2, df= length(coef(logit.1))) # probemos que el primer coef = 0
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = c(1,6), df= length(coef(logit.1)) )
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = c(1,6), df= length(coef(logit.1)) )
lrtest(logit.1, logit.2) # Fijate que aqui no comparamos parametros, si no que LogLik
#############
# Likelihood Ratio: comparando log-lilelihoods
#############
p_load(lrtest)
#############
# Likelihood Ratio: comparando log-lilelihoods
#############
p_load(lmtest)
lrtest(logit.1, logit.2) # Fijate que aqui no comparamos parametros, si no que LogLik
logLik(logit.1)
logLik(logit.2)
anova(logit.1,logit.2, test="Rao") # Ambos modelos son comparados y ven si EN CONJUNTO ("joint hypothesis") mejoran el slope de la curva.
help*anova
help(anova)
cat("\014")
rm(list=ls())
graphics.off()
# Hypothesis testing: Wald test, Likelihood Ratio, Lagrange Multiplier (pr치ctico)
if (!require("pacman")) install.packages("pacman"); library(pacman)
options(scipen=100000000)
set.seed(2020)
# Data
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(mydata)
help(admissions)
data(admissions)
data(admisions)
summary(mydata)
mydata$rank <- factor(mydata$rank)
# modelo 1
logit.1 <- glm(admit ~ gre + gpa + rank, data = mydata, family = binomial(link = "logit")) # unrestricted (full)
summary(logit.1)
# modelo 2: sin rank
logit.2 <- glm(admit ~ gre + gpa, data = mydata, family = binomial(link = "logit")) # restricted
summary(logit.2)
summary(logit.2)
help(wald.test)
coef(logit.1)
vcov(logit.1)
summary(logit.1)
coef(logit.1)
length(coef(logit.1))
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 2, df= length(coef(logit.1)))
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = c(1,6), df= length(coef(logit.1)) )
#############
# Likelihood Ratio: comparando log-likelihoods
#############
p_load(lmtest)
# Extraer Lig Likelihood de cada modelo
logLik(logit.1)
logLik(logit.2)
lrtest(logit.1, logit.2) # Fijate que aqui no comparamos parametros, si no que LogLik's
anova(logit.1, test="Rao") # Terminos del modelo 1 son anadidos sequentially y comparados si aportan a mejorar el slope de la curva.
anova(logit.1,logit.2, test="Rao") # Ambos modelos son comparados y ven si EN CONJUNTO ("joint hypothesis") mejoran el slope de la curva.
cat("\014")
rm(list=ls())
graphics.off()
# Hypothesis testing: Wald test, Likelihood Ratio, Lagrange Multiplier (pr치ctico)
if (!require("pacman")) install.packages("pacman"); library(pacman)
options(scipen=100000000)
set.seed(2020)
# Data
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(mydata)
summary(mydata)
mydata$rank <- factor(mydata$rank)
#############
# Modelos
#############
# modelo 1
logit.1 <- glm(admit ~ gre + gpa + rank, data = mydata, family = binomial(link = "logit")) # unrestricted (full)
summary(logit.1)
# modelo 2: sin rank
logit.2 <- glm(admit ~ gre + gpa, data = mydata, family = binomial(link = "logit")) # restricted
summary(logit.2)
# Wald Test en el Intercepto
aod::wald.test(b = coef(logit.1), Sigma = vcov(logit.1), Terms = 2, df= length(coef(logit.1)))
# Carga la base de datos.
library(foreign)
dat = read.dta("https://github.com/hbahamonde/MLE/raw/master/Datasets/golfo.dta")
