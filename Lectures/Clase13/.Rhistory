dim(Smarket)
summary(Smarket)
glm_fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data = Smarket,
family = binomial)
glm_probs = data.frame(probs = predict(glm_fit, type="response"))
glm_probs
head(glm_probs)
contrasts(Smarket$Direction)
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(knitr)
set.seed(2020)
options(scipen=9999999)
if (!require("pacman")) install.packages("pacman"); library(pacman)
###################################################
### code chunk number 2: data
###################################################
options(scipen=100000000)
set.seed(2020)
# Data
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(mydata)
summary(mydata)
mydata$rank <- factor(mydata$rank)
logit.1 <- glm(admit ~ gre + gpa + rank, data = mydata, family = binomial(link = "logit"))
summary(logit.1)
predict(logit.1, type="response")
?predict
plot(predict(logit.1, type="response"))
plot(predict(logit.1))
predict(logit.1, type="response", se.fit = T)
data.frame(predict(logit.1, type="response", se.fit = T))
p_load("effects")
e1.lm1 <- predictorEffect(logit.1)
p_load("effects")
gre.pred.prob <- predictorEffect("gre", logit.1)
gpa.pred.prob <- predictorEffect("gpa", logit.1)
gre.pred.prob
gpa.pred.prob <- predictorEffect("gpa", logit.1)
plot(gre.pred.prob)
plot(gpa.pred.prob)
plot(predictorEffect("gre", logit.1), lines=list(multiline=TRUE))
plot(predictorEffect(logit.1))
plot(effects::predictorEffect(logit.1))
predictorEffect(logit.1)
plot(predictorEffects(logit.1))
gre.pred.prob <- predictorEffects("gre", logit.1)
plot(gre.pred.prob)
plot(predictorEffect("gre", logit.1)) # Solo una variable (SINGULAR)
plot(gpa.pred.prob <- predictorEffect("gpa", logit.1)) # Solo una variable (SINGULAR)
predictorEffect("type", logit.1, xlevels=list(income=c(min(gre), max(gre))))
predictorEffect("type", logit.1, xlevels=list(gre=c(min(gre), max(gre))))
predictorEffect("type", logit.1, xlevels=list(gre=c(min(mydata$gre), max(mydata$gre))))
mydata$gre
min(mydata$gre)
max(mydata$gre)
predictorEffect("type", logit.1, xlevels=list(gre=c(220, 800)))
logit.1
predictorEffect("gpa", logit.1, xlevels=list(gre=c(min(mydata$gre), max(mydata$gre))))
plot(predictorEffect("gpa", logit.1, xlevels=list(gre=c(min(mydata$gre), max(mydata$gre)))))
plot(predictorEffect("rank", logit.1, xlevels=list(gre=c(min(mydata$gre), max(mydata$gre)))))
mydata$gre
plot(predictorEffect("rank", logit.1, xlevels=list(gre=c(min(mydata$gre), max(mydata$gre)))))
plot(predictorEffect("rank", logit.1, xlevels=list(gre=c(220, 800))))
plot(predictorEffect("rank", logit.1, xlevels=list(gre=c(min(mydata$gre):max(mydata$gre)))))
plot(predictorEffect("gpa", logit.1, xlevels=list(gre=c(min(mydata$gre), max(mydata$gre)))))
plot(
predictorEffect("rank", logit.1, xlevels=list(gre=c(min(mydata$gre), max(mydata$gre)))), lines=list(multiline=TRUE),
+ confint=list(style="bars"))
logit.1.p = predictorEffect("rank", logit.1, xlevels=list(gre=c(min(mydata$gre), max(mydata$gre))))
logit.1.p = predictorEffect("rank", logit.1, xlevels=list(gre=c(min(mydata$gre), max(mydata$gre))))
plot(logit.1.p, lines=list(multiline=TRUE),confint=list(style="bars"))
logit.1.p = predictorEffect("gpa", logit.1, xlevels=list(gre=c(min(mydata$gre), max(mydata$gre))))
plot(logit.1.p, lines=list(multiline=TRUE),confint=list(style="bars"))
logit.1.p = predictorEffect("rank", logit.1, xlevels=list(gre=c(min(mydata$gre), max(mydata$gre))))
plot(logit.1.p, lines=list(multiline=TRUE),confint=list(style="bars"))
plot(predictorEffect("rank", logit.1, xlevels=list(gre=c(min(mydata$gre), max(mydata$gre)))))
plot(predictorEffect("gre", logit.1, xlevels=list(rank=mean(rank))))
plot(predictorEffect("gre", logit.1, xlevels=list(rank=mean(mydata$rank))))
mydata$rank
plot(predictorEffect("gre", logit.1, xlevels=list(gpa=mean(mydata$gpa))))
summary(mydata$gpa)
predictorEffect("gre", logit.1, xlevels=list(gpa=c(2.260, 3.395, 4.000 )))
test = predictorEffect("gre", logit.1, xlevels=list(gpa=c(2.260, 3.395, 4.000 )))
plot(test, lines=list(multiline=FALSE))
test = predictorEffect("gpa", logit.1, xlevels=list(gpa=c(2.260, 3.395, 4.000 )))
plot(test, lines=list(multiline=FALSE))
test = predictorEffect("gpa", logit.1, xlevels=list(gpa=c(2.260, 3.395, 4.000 )))
plot(test, lines=list(multiline=FALSE))
test = predictorEffect("rank", logit.1, xlevels=list(gpa=c(2.260, 3.395, 4.000 )))
plot(test, lines=list(multiline=FALSE))
plot(predictorEffects(logit.1)) # Todo el modelo (PLURAL)
plot(predictorEffect("gre", logit.1)) # Solo una variable (SINGULAR)
plot(gpa.pred.prob <- predictorEffect("gpa", logit.1)) # Solo una variable (SINGULAR)
plot(predictorEffect("rank", logit.1, xlevels=list(gre=c(min(mydata$gre), max(mydata$gre)))))
e1.mm1 <- predictorEffect("gre", logit.1)
plot(e1.mm1, lines=list(multiline=TRUE), confint=list(style="auto"))
logit.1
summary(logit.1)
summary(mydata$gre)
e3.lm1 <- predictorEffect("rank", logit.1, xlevels=list(gre=c(220.0, 580.0, 800.0 )))
plot(e3.lm1, lines=list(multiline=TRUE),
+ confint=list(style="bars"))
plot(e3.lm1, lines=list(multiline=TRUE),confint=list(style="bars"))
e3.lm1 <- predictorEffect("rank", logit.1, xlevels=list(gre=c(220.0, 800.0 )))
plot(e3.lm1, lines=list(multiline=TRUE),confint=list(style="bars"))
e3.lm1 <- predictorEffect("rank", logit.1, xlevels=list(grez=c(220.0, 800.0 )))
logit.1
e3.lm1 <- predictorEffect("rank", logit.1, xlevels=list(gpa=c(220.0, 800.0 )))
plot(e3.lm1, lines=list(multiline=TRUE),confint=list(style="bars"))
summary(mydata$gre)
summary(mydata$gpa)
?quartil
quantile(mydata$gre, 0)
quantile(mydata$gre, 50)
quantile(mydata$gre, .05)
quantile(mydata$gre, .1)
quantile(mydata$gre, 1)
quantile(mydata$gre, 0)
quantile(mydata$gre, .05)
quantile(mydata$gre, 1)
plot(predictorEffects(gm3, ~ gre + gpa,
xlevels=list(
gre=c(quantile(mydata$gre, 0),
quantile(mydata$gre, .5),
quantile(mydata$gre, 1)),
gpa=c(quantile(mydata$gpa, 0),
quantile(mydata$gpa, .5),
quantile(mydata$gpa, 1)))),
axes=list(grid=TRUE,
x=list(rug=FALSE),
y=list(type="response", lab="Blowdown probability")),
lines=list(multiline=TRUE))
plot(predictorEffects(logit.1, ~ gre + gpa,
xlevels=list(
gre=c(quantile(mydata$gre, 0),
quantile(mydata$gre, .5),
quantile(mydata$gre, 1)),
gpa=c(quantile(mydata$gpa, 0),
quantile(mydata$gpa, .5),
quantile(mydata$gpa, 1)))),
axes=list(grid=TRUE,
x=list(rug=FALSE),
y=list(type="response", lab="Blowdown probability")),
lines=list(multiline=TRUE))
plot(predictorEffects(logit.1)) # Todo el modelo (PLURAL)
plot(predictorEffects(logit.1, ~ gre,
xlevels=list(
gpa=c(quantile(mydata$gpa, 0),
quantile(mydata$gpa, .5),
quantile(mydata$gpa, 1)))),
axes=list(grid=TRUE,
x=list(rug=FALSE),
y=list(type="response", lab="Blowdown probability")),
lines=list(multiline=TRUE))
plot(predictorEffects(logit.1, ~ gre,
xlevels=list(
gpa=c(quantile(mydata$gpa, 0),
quantile(mydata$gpa, .5),
quantile(mydata$gpa, 1)))),
axes=list(grid=TRUE,
y=list(type="response", lab="Blowdown probability")),
lines=list(multiline=TRUE))
plot(predictorEffects(logit.1, ~ gre,
xlevels=list(
gpa=c(quantile(mydata$gpa, 0),
quantile(mydata$gpa, .5),
quantile(mydata$gpa, 1)))),
axes=list(y=list(type="response")),
lines=list(multiline=TRUE))
plot(predictorEffects(logit.1, ~ gpa,
xlevels=list(
gpa=c(quantile(mydata$gpa, 0),
quantile(mydata$gpa, .5),
quantile(mydata$gpa, 1)))),
axes=list(y=list(type="response")),
lines=list(multiline=TRUE))
plot(predictorEffects(logit.1, ~ rank,
xlevels=list(
gpa=c(quantile(mydata$gpa, 0),
quantile(mydata$gpa, .5),
quantile(mydata$gpa, 1)))),
axes=list(y=list(type="response")),
lines=list(multiline=TRUE))
plot(predictorEffect("gre", logit.1)) # Solo una variable (SINGULAR)
plot(gpa.pred.prob <- predictorEffect("gpa", logit.1)) # Solo una variable (SINGULAR)
plot(predictorEffects(logit.1, ~ gpa,
xlevels=list(
gpa=c(quantile(mydata$gpa, 0),
quantile(mydata$gpa, .5),
quantile(mydata$gpa, 1)))),
axes=list(y=list(type="response")),
lines=list(multiline=TRUE))
plot(predictorEffect("gre", logit.1)) # Solo una variable (SINGULAR)
plot(gpa.pred.prob <- predictorEffect("gpa", logit.1)) # Solo una variable (SINGULAR)
plot(predictorEffects(logit.1)) # Todo el modelo (PLURAL)
plot(predict(logit.1)) # logit scale
plot(predict(logit.1, type="response")) # Predicted Prob
predict(logit.1)
head(predict(logit.1))
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(knitr)
set.seed(2020)
options(scipen=9999999)
###################################################
### code chunk number 2: data
###################################################
options(scipen=100000000)
set.seed(2020)
# Data
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(mydata)
summary(mydata)
mydata$rank <- factor(mydata$rank)
###################################################
### code chunk number 3: l:1
###################################################
logit.1 <- glm(admit ~ gre + gpa + rank, data = mydata, family = binomial(link = "logit"))
summary(logit.1)
tabla.1 <- with(admit,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
rank=mean(rank, na.rm=TRUE),
gpa=min(mydata$gpa))
)
tabla.1 <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
rank=mean(rank, na.rm=TRUE),
gpa=min(mydata$gpa))
)
predict(logit.1, tabla.1, type="response")
tabla.1 <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa=min(mydata$gpa))
)
predict(logit.1, tabla.1, type="response")
c(min(mydata$gre), max(mydata$gre))
tabla.1 <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = min(mydata$gpa))
)
predict(logit.1, tabla.1, type="response")
logit.1 <- glm(admit ~ gre + gpa + as.numeric(rank), data = mydata, family = binomial(link = "logit"))
tabla.1 <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = min(mydata$gpa))
)
predict(logit.1, tabla.1, type="response")
as.numeric(rank)
logit.1 <- glm(admit ~ gre + gpa + as.numeric(mydata$rank), data = mydata, family = binomial(link = "logit"))
tabla.1 <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = min(mydata$gpa))
)
predict(logit.1, tabla.1, type="response")
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(knitr)
set.seed(2020)
options(scipen=9999999)
###################################################
### code chunk number 2: data
###################################################
options(scipen=100000000)
set.seed(2020)
# Data
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(mydata)
summary(mydata)
#mydata$rank <- factor(mydata$rank)
###################################################
### code chunk number 3: l:1
###################################################
logit.1 <- glm(admit ~ gre + gpa + rank, data = mydata, family = binomial(link = "logit"))
summary(logit.1)
tabla.1 <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = min(mydata$gpa))
)
predict(logit.1, tabla.1, type="response")
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(knitr)
set.seed(2020)
options(scipen=9999999)
###################################################
### code chunk number 2: data
###################################################
options(scipen=100000000)
set.seed(2020)
# Data
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(mydata)
summary(mydata)
###################################################
### code chunk number 3: l:1
###################################################
logit.1 <- glm(admit ~ gre + gpa, data = mydata, family = binomial(link = "logit"))
summary(logit.1)
tabla.1 <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = min(mydata$gpa))
)
predict(logit.1, tabla.1, type="response")
gre.gpa.alto.bajo <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = c(min(mydata$gpa), min(mydata$gpa))
)
)
predict(logit.1, gre.gpa.alto.bajo, type="response")
gre.gpa.alto.bajo <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = mean(mydata$gpa))
)
predict(logit.1, gre.gpa.alto.bajo, type="response")
gre.gpa.alto.bajo <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = mean(mydata$gpa))
)
predict(logit.1, gre.gpa.alto.bajo, type="response")
t
predict(logit.1, gre.alto.bajo, type="response")
gre.alto.bajo <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = min(mydata$gpa))
)
predict(logit.1, gre.alto.bajo, type="response")
gre.gpa.alto.bajo <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = mean(mydata$gpa))
)
predict(logit.1, gre.gpa.alto.bajo, type="response")
gpa.bajo <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = min(mydata$gpa))
)
predict(logit.1, gpa.bajo, type="response")
gpa.medio <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = max(mydata$gpa))
)
predict(logit.1, gpa.medio, type="response")
gpa.alto <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = max(mydata$gpa))
)
predict(logit.1, gpa.alto.bajo, type="response")
gpa.alto <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = max(mydata$gpa))
)
predict(logit.1, gpa.alto, type="response")
predict(logit.1, gpa.alto, type="response")
predict(logit.1, gpa.alto, type="response")[1]
as.numeric(predict(logit.1, gpa.alto, type="response")[1])
round(as.numeric(predict(logit.1, gpa.alto, type="response")[1]), 3)
round(as.numeric(predict(logit.1, gpa.alto, type="response")[1]), 2)
predict(logit.1, gpa.bajo, type="response")
round(as.numeric(predict(logit.1, gpa.bajo, type="response")[1]), 2)
round(as.numeric(predict(logit.1, gpa.bajo, type="response")[2]), 2)
round(as.numeric(predict(logit.1, gpa.medio, type="response")[1]), 2)
round(as.numeric(predict(logit.1, gpa.medio, type="response")[2]), 2)
round(as.numeric(predict(logit.1, gpa.alto, type="response")[1]), 2)
round(as.numeric(predict(logit.1, gpa.alto, type="response")[2]), 2)
gpa.bajo <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = min(mydata$gpa))
)
gpa.medio <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = max(mydata$gpa))
)
gpa.alto <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = max(mydata$gpa))
)
# usar funcion predict
predict(logit.1, gpa.bajo, type="response")
predict(logit.1, gpa.medio, type="response")
predict(logit.1, gpa.alto, type="response")
gpa.bajo <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = min(mydata$gpa))
)
# usar funcion predict
predict(logit.1, gpa.bajo, type="response")
gpa.bajo <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = min(mydata$gpa))
)
predict(logit.1, gpa.bajo, type="response")
gpa.bajo
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(knitr)
set.seed(2020)
options(scipen=9999999)
###################################################
### code chunk number 2: data
###################################################
options(scipen=100000000)
set.seed(2020)
# Data
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(mydata)
summary(mydata)
mydata$rank <- factor(mydata$rank)
###################################################
### code chunk number 3: l:1
###################################################
logit.1 <- glm(admit ~ gre + gpa + rank, data = mydata, family = binomial(link = "logit"))
summary(logit.1)
gpa.bajo <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = min(mydata$gpa))
)
gpa.medio <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = max(mydata$gpa))
)
gpa.alto <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = max(mydata$gpa))
)
###################################################
### code chunk number 14: tabla:2
###################################################
# usar funcion predict
predict(logit.1, gpa.bajo, type="response")
gpa.bajo <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = min(mydata$gpa))
)
gpa.medio <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = max(mydata$gpa))
)
gpa.alto <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = max(mydata$gpa))
)
###################################################
### code chunk number 14: tabla:2
###################################################
# usar funcion predict
predict(logit.1, gpa.bajo, type="response")
###################################################
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(knitr)
set.seed(2020)
options(scipen=9999999)
###################################################
### code chunk number 2: data
###################################################
options(scipen=100000000)
set.seed(2020)
# Data
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(mydata)
summary(mydata)
###################################################
### code chunk number 3: l:1
###################################################
logit.1 <- glm(admit ~ gre + gpa, data = mydata, family = binomial(link = "logit"))
summary(logit.1)
gpa.bajo <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = min(mydata$gpa))
)
gpa.medio <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = max(mydata$gpa))
)
gpa.alto <- with(mydata,
data.frame(
gre = c(min(mydata$gre), max(mydata$gre)),
gpa = max(mydata$gpa))
)
###################################################
### code chunk number 14: tabla:2
###################################################
# usar funcion predict
predict(logit.1, gpa.bajo, type="response")
predict(logit.1, gpa.medio, type="response")
mean(mydata$gpa)
mean(mydata$gpa, na.rm = T)
